platform :android do
  desc "Upload a beta build to the google playstore"
  lane :beta do
    upload_to_play_store(
      track: 'beta',
      aab: "platforms/android/app/build/outputs/bundle/release/app-release.aab",
      json_key: "/tmp/playstore_key.json",
      package_name: "de.wtfeg.plusme"
  )
  end
end

platform :ios do
    desc "Build .ipa for AppCenter"
    lane :appcenter do
        create_keychain(
            name: "CI",
            password: ENV["MATCH_PASSWORD"],
            default_keychain: true,
            unlock: true,
            timeout: 3600,
            lock_when_sleeps: false
        )
        match(
            type: "adhoc",
            readonly: true,
            keychain_name: "CI",
            keychain_password: ENV["MATCH_PASSWORD"]
        )
        sh("security list-keychains -d user")
        sh("security default-keychain -d user")
        sh("security find-identity -v -p codesigning CI")
        disable_automatic_code_signing(
            path: "./platforms/ios/plusme.xcodeproj",
            team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
        )
        cocoapods(
            podfile: "./platforms/ios/Podfile",
            clean_install: true,
            verbose: true
        )
        gym(
            export_method: 'ad-hoc',
            workspace: "./platforms/ios/plusme.xcworkspace",
            clean: true,
            output_directory: "./builds",
            output_name: "plusme.ipa",
            codesigning_identity: "Apple Distribution: WTF Kooperative eG (5V8UJLB8H3)",
            export_xcargs: "-allowProvisioningUpdates",
            xcargs: {
                :PROVISIONING_PROFILE_SPECIFIER => "match AdHoc de.wtfeg.plusme"
            },
            export_options: {
              provisioningProfiles: {
                "de.wtfeg.plusme" => "match AdHoc de.wtfeg.plusme"
              }
            }
        )
    end
    desc "Build .ipa for AppStore"
    lane :build do
        create_keychain(
            name: "CI",
            password: ENV["MATCH_PASSWORD"],
            default_keychain: true,
            unlock: true,
            timeout: 3600,
            lock_when_sleeps: false
        )
        match(
            type: "appstore",
            readonly: true,
            keychain_name: "CI",
            keychain_password: ENV["MATCH_PASSWORD"]
        )
        sh("security list-keychains -d user")
        sh("security default-keychain -d user")
        sh("security find-identity -v -p codesigning CI")
        disable_automatic_code_signing(
            path: "./platforms/ios/plusme.xcodeproj",
            team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
        )
        cocoapods(
            podfile: "./platforms/ios/Podfile",
            clean_install: true,
            verbose: true
        )
        gym(
            export_method: 'app-store',
            workspace: "./platforms/ios/plusme.xcworkspace",
            clean: true,
            output_directory: "./builds",
            output_name: "plusme.ipa",
            codesigning_identity: "Apple Distribution: WTF Kooperative eG (5V8UJLB8H3)",
            export_xcargs: "-allowProvisioningUpdates",
            xcargs: {
                :PROVISIONING_PROFILE_SPECIFIER => "match AppStore de.wtfeg.plusme"
            },
            export_options: {
              provisioningProfiles: {
                "de.wtfeg.plusme" => "match AppStore de.wtfeg.plusme"
              }
            }
        )
    end
    lane :store do
        api_key = app_store_connect_api_key(
            key_id: "FLMC3H9H8X",
            issuer_id: "40fe5aa7-d791-4530-850b-1eed7aa81b83",
            key_filepath: "/tmp/AuthKey_FLMC3H9H8X.p8",
            in_house: false # optional but may be required if using match/sigh
        )

        upload_to_testflight(
            ipa: "./builds/plusme.ipa",
            distribute_external: true,
            groups: "Externe Tester",
            changelog: "diverse fixes & features"
        )
    end
end
